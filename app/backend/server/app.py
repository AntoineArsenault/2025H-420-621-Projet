import os  # Permet de g√©rer les chemins de fichiers (ex : pour retrouver les dossiers du projet)
import socket  # Sert √† conna√Ætre l'adresse IP locale de la machine
from flask import Flask, render_template  # Flask sert √† cr√©er des applications web simples
from game import Game  # Importe la classe Game (qui g√®re la logique du jeu d‚Äô√©checs)
from flask_socketio import SocketIO  # SocketIO permet la communication en temps r√©el (WebSockets)
import atexit  # Permet d‚Äôex√©cuter du code √† la fermeture de l‚Äôapplication (ex : pour arr√™ter Stockfish)
from .websockets import register_websocket_events, engine  # Importe la logique des sockets + le moteur d'√©checs Stockfish

# D√©finir les chemins des dossiers du projet
BASE_DIR = os.path.abspath(os.path.dirname(__file__))  # Donne le chemin du dossier actuel
TEMPLATES_DIR = os.path.join(BASE_DIR, "../../frontend/templates")  # Chemin vers les fichiers HTML
STATIC_DIR = os.path.join(BASE_DIR, "../../frontend/static")  # Chemin vers les fichiers CSS/JS/images

# Cr√©er l'application Flask (site web)
app = Flask(__name__, template_folder=TEMPLATES_DIR, static_folder=STATIC_DIR)

# Initialiser la communication WebSocket avec Flask
socketio = SocketIO(app)

# Route principale : quand l'utilisateur va sur le site ("/"), il re√ßoit la page HTML index.html
@app.route("/")
def home():
    """ Affiche la page principale du jeu. """
    return render_template("index.html")  # Flask va chercher le fichier dans frontend/templates/index.html

# Enregistre les √©v√©nements WebSocket (d√©finis dans websockets.py)
from .websockets import register_websocket_events
register_websocket_events(socketio)  # On transmet l‚Äôobjet socketio pour qu‚Äôil soit utilis√© dans websockets.py

# Ce qui suit ne s'ex√©cute que si on lance ce fichier directement (pas si on l'importe)
if __name__ == "__main__":
    # Obtenir le nom de l‚Äôordinateur et son adresse IP locale
    hostname = socket.gethostname()
    local_ip = socket.gethostbyname(hostname)

    # Affiche une adresse pour que d'autres appareils sur le m√™me r√©seau puissent rejoindre le jeu
    print("üöÄ Serveur lanc√© en local !")
    print(f"üåê Adresse pour jouer sur un autre appareil : http://{local_ip}:5000\n")

    # D√©finir une fonction qui sera ex√©cut√©e quand l'application s'arr√™te (fermeture du terminal par exemple)
    @atexit.register
    def shutdown_engine():
        """ Arr√™ter le moteur Stockfish proprement. """
        print("Arr√™t du moteur Stockfish...")
        engine.quit()  # On demande √† Stockfish de se fermer proprement

    # D√©marre le serveur Flask avec SocketIO, accessible sur toutes les adresses IP de la machine
    socketio.run(app, debug=True, host="0.0.0.0", port=5000)
